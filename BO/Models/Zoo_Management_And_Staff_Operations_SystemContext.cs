// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace BO.Models;

public partial class Zoo_Management_And_Staff_Operations_SystemContext : DbContext
{
    public Zoo_Management_And_Staff_Operations_SystemContext()
    {
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer(new ConfigurationBuilder().AddJsonFile("appsettings.json").Build().GetConnectionString("DefaultConnection"));
        }
    }
    public Zoo_Management_And_Staff_Operations_SystemContext(DbContextOptions<Zoo_Management_And_Staff_Operations_SystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Animal> Animals { get; set; }

    public virtual DbSet<AnimalAssign> AnimalAssigns { get; set; }

    public virtual DbSet<AnimalCage> AnimalCages { get; set; }

    public virtual DbSet<AnimalImage> AnimalImages { get; set; }

    public virtual DbSet<AnimalType> AnimalTypes { get; set; }

    public virtual DbSet<Application> Applications { get; set; }

    public virtual DbSet<ApplicationType> ApplicationTypes { get; set; }

    public virtual DbSet<Cage> Cages { get; set; }

    public virtual DbSet<CleaningOption> CleaningOptions { get; set; }

    public virtual DbSet<CleaningProcess> CleaningProcesses { get; set; }

    public virtual DbSet<CleaningTask> CleaningTasks { get; set; }

    public virtual DbSet<Flock> Flocks { get; set; }

    public virtual DbSet<Food> Foods { get; set; }

    public virtual DbSet<IncompatibleAnimalType> IncompatibleAnimalTypes { get; set; }

    public virtual DbSet<Individual> Individuals { get; set; }

    public virtual DbSet<LeaderAssign> LeaderAssigns { get; set; }

    public virtual DbSet<MealDay> MealDays { get; set; }

    public virtual DbSet<MealFood> MealFoods { get; set; }

    public virtual DbSet<MemberAssign> MemberAssigns { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<ReportAttachment> ReportAttachments { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Schedule> Schedules { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TaskEstimate> TaskEstimates { get; set; }

    public virtual DbSet<TaskHealth> TaskHealths { get; set; }

    public virtual DbSet<TaskMeal> TaskMeals { get; set; }

    public virtual DbSet<TaskType> TaskTypes { get; set; }

    public virtual DbSet<Team> Teams { get; set; }

    public virtual DbSet<UrlProcess> UrlProcesses { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<ZooArea> ZooAreas { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3213E83F93E9B1F1");

            entity.ToTable("Account");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Email)
                .HasMaxLength(500)
                .HasColumnName("email");
            entity.Property(e => e.Password)
                .HasMaxLength(500)
                .HasColumnName("password");
            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__Account__role_id__0A9D95DB");
        });

        modelBuilder.Entity<Animal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Animal__3213E83F80F902D1");

            entity.ToTable("Animal");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalTypeId).HasColumnName("animal_type_id");
            entity.Property(e => e.ArrivalDate).HasColumnName("arrival_date");
            entity.Property(e => e.Classify)
                .HasMaxLength(500)
                .HasColumnName("classify");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");

            entity.HasOne(d => d.AnimalType).WithMany(p => p.Animals)
                .HasForeignKey(d => d.AnimalTypeId)
                .HasConstraintName("FK__Animal__animal_t__0B91BA14");
        });

        modelBuilder.Entity<AnimalAssign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AnimalAs__3213E83F205B0EC5");

            entity.ToTable("AnimalAssign");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalCageId).HasColumnName("animal_cage_id");
            entity.Property(e => e.TaskId).HasColumnName("task_id");

            entity.HasOne(d => d.AnimalCage).WithMany(p => p.AnimalAssigns)
                .HasForeignKey(d => d.AnimalCageId)
                .HasConstraintName("FK__AnimalAss__anima__0C85DE4D");

            entity.HasOne(d => d.Task).WithMany(p => p.AnimalAssigns)
                .HasForeignKey(d => d.TaskId)
                .HasConstraintName("FK__AnimalAss__task___0D7A0286");
        });

        modelBuilder.Entity<AnimalCage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AnimalCa__3213E83F0BF4C52F");

            entity.ToTable("AnimalCage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalId).HasColumnName("animal_id");
            entity.Property(e => e.CageId).HasColumnName("cage_id");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.ToDate).HasColumnName("to_date");

            entity.HasOne(d => d.Animal).WithMany(p => p.AnimalCages)
                .HasForeignKey(d => d.AnimalId)
                .HasConstraintName("FK__AnimalCag__anima__0E6E26BF");

            entity.HasOne(d => d.Cage).WithMany(p => p.AnimalCages)
                .HasForeignKey(d => d.CageId)
                .HasConstraintName("FK__AnimalCag__cage___0F624AF8");
        });

        modelBuilder.Entity<AnimalImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AnimalIm__3213E83F739069EB");

            entity.ToTable("AnimalImage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalId).HasColumnName("animal_id");
            entity.Property(e => e.UrlImage).HasColumnName("url_image");

            entity.HasOne(d => d.Animal).WithMany(p => p.AnimalImages)
                .HasForeignKey(d => d.AnimalId)
                .HasConstraintName("FK__AnimalIma__anima__10566F31");
        });

        modelBuilder.Entity<AnimalType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AnimalTy__3213E83F31CAA0AC");

            entity.ToTable("AnimalType");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Characteristics)
                .HasMaxLength(500)
                .HasColumnName("characteristics");
            entity.Property(e => e.ConservationStatus)
                .HasMaxLength(500)
                .HasColumnName("conservation_status");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Diet)
                .HasMaxLength(500)
                .HasColumnName("diet");
            entity.Property(e => e.Distribution)
                .HasMaxLength(500)
                .HasColumnName("distribution");
            entity.Property(e => e.EatFrequency)
                .HasMaxLength(500)
                .HasColumnName("eat_frequency");
            entity.Property(e => e.EnglishName)
                .HasMaxLength(500)
                .HasColumnName("english_name");
            entity.Property(e => e.Family)
                .HasMaxLength(500)
                .HasColumnName("family");
            entity.Property(e => e.Habitat)
                .HasMaxLength(500)
                .HasColumnName("habitat");
            entity.Property(e => e.Reproduction)
                .HasMaxLength(500)
                .HasColumnName("reproduction");
            entity.Property(e => e.ScientificName)
                .HasMaxLength(500)
                .HasColumnName("scientific_name");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
            entity.Property(e => e.UrlImage).HasColumnName("url_image");
            entity.Property(e => e.VietnameseName)
                .HasMaxLength(500)
                .HasColumnName("vietnamese_name");
            entity.Property(e => e.WeightRange)
                .HasMaxLength(500)
                .HasColumnName("weight_range");
        });

        modelBuilder.Entity<Application>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Applicat__3213E83F105AA7E9");

            entity.ToTable("Application");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ApplicationTypeId).HasColumnName("application_type_id");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Details)
                .HasMaxLength(500)
                .HasColumnName("details");
            entity.Property(e => e.RecieverId).HasColumnName("reciever_id");
            entity.Property(e => e.Reply)
                .HasMaxLength(500)
                .HasColumnName("reply");
            entity.Property(e => e.SenderId).HasColumnName("sender_id");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.ApplicationType).WithMany(p => p.Applications)
                .HasForeignKey(d => d.ApplicationTypeId)
                .HasConstraintName("FK__Applicati__appli__114A936A");

            entity.HasOne(d => d.Reciever).WithMany(p => p.ApplicationRecievers)
                .HasForeignKey(d => d.RecieverId)
                .HasConstraintName("FK__Applicati__recie__123EB7A3");

            entity.HasOne(d => d.Sender).WithMany(p => p.ApplicationSenders)
                .HasForeignKey(d => d.SenderId)
                .HasConstraintName("FK__Applicati__sende__1332DBDC");
        });

        modelBuilder.Entity<ApplicationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Applicat__3213E83F8F70A880");

            entity.ToTable("ApplicationType");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Cage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cage__3213E83F1F635D99");

            entity.ToTable("Cage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Classify)
                .HasMaxLength(500)
                .HasColumnName("classify");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CurrentQuantity).HasColumnName("current_quantity");
            entity.Property(e => e.DateCreate).HasColumnName("date_create");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.MaxQuantity).HasColumnName("max_quantity");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.Size)
                .HasMaxLength(500)
                .HasColumnName("size");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
            entity.Property(e => e.UrlImage).HasColumnName("url_image");
            entity.Property(e => e.ZooAreaId).HasColumnName("zoo_area_id");

            entity.HasOne(d => d.ZooArea).WithMany(p => p.Cages)
                .HasForeignKey(d => d.ZooAreaId)
                .HasConstraintName("FK__Cage__zoo_area_i__14270015");
        });

        modelBuilder.Entity<CleaningOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cleaning__3213E83FE22F159B");

            entity.ToTable("CleaningOption");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalTypeId).HasColumnName("animal_type_id");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");

            entity.HasOne(d => d.AnimalType).WithMany(p => p.CleaningOptions)
                .HasForeignKey(d => d.AnimalTypeId)
                .HasConstraintName("FK__CleaningO__anima__151B244E");
        });

        modelBuilder.Entity<CleaningProcess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cleaning__3213E83F53BFC408");

            entity.ToTable("CleaningProcess");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CleaningOptionId).HasColumnName("cleaning_option_id");
            entity.Property(e => e.Content)
                .HasMaxLength(500)
                .HasColumnName("content");
            entity.Property(e => e.EstimateTime)
                .HasMaxLength(500)
                .HasColumnName("estimate_time");
            entity.Property(e => e.StepNumber).HasColumnName("step_number");

            entity.HasOne(d => d.CleaningOption).WithMany(p => p.CleaningProcesses)
                .HasForeignKey(d => d.CleaningOptionId)
                .HasConstraintName("FK__CleaningP__clean__160F4887");
        });

        modelBuilder.Entity<CleaningTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cleaning__3213E83F52A7443E");

            entity.ToTable("CleaningTask");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalAssignId).HasColumnName("animal_assign_id");
            entity.Property(e => e.CleaningOptionId).HasColumnName("cleaning_option_id");

            entity.HasOne(d => d.AnimalAssign).WithMany(p => p.CleaningTasks)
                .HasForeignKey(d => d.AnimalAssignId)
                .HasConstraintName("FK__CleaningT__anima__17036CC0");

            entity.HasOne(d => d.CleaningOption).WithMany(p => p.CleaningTasks)
                .HasForeignKey(d => d.CleaningOptionId)
                .HasConstraintName("FK__CleaningT__clean__17F790F9");
        });

        modelBuilder.Entity<Flock>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Flock__3213E83F3BB427D5");

            entity.ToTable("Flock");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalId).HasColumnName("animal_id");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .HasColumnName("notes");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");

            entity.HasOne(d => d.Animal).WithMany(p => p.Flocks)
                .HasForeignKey(d => d.AnimalId)
                .HasConstraintName("FK__Flock__animal_id__18EBB532");
        });

        modelBuilder.Entity<Food>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Food__3213E83FAB610035");

            entity.ToTable("Food");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CaloPerGram).HasColumnName("calo_per_gram");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Decription)
                .HasMaxLength(500)
                .HasColumnName("decription");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
        });

        modelBuilder.Entity<IncompatibleAnimalType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Incompat__3213E83F7308970E");

            entity.ToTable("IncompatibleAnimalType");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalTypeId1).HasColumnName("animal_type_id_1");
            entity.Property(e => e.AnimalTypeId2).HasColumnName("animal_type_id_2");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .HasColumnName("reason");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");

            entity.HasOne(d => d.AnimalTypeId1Navigation).WithMany(p => p.IncompatibleAnimalTypeAnimalTypeId1Navigations)
                .HasForeignKey(d => d.AnimalTypeId1)
                .HasConstraintName("FK__Incompati__anima__19DFD96B");

            entity.HasOne(d => d.AnimalTypeId2Navigation).WithMany(p => p.IncompatibleAnimalTypeAnimalTypeId2Navigations)
                .HasForeignKey(d => d.AnimalTypeId2)
                .HasConstraintName("FK__Incompati__anima__1AD3FDA4");
        });

        modelBuilder.Entity<Individual>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Individu__3213E83FDCDB833E");

            entity.ToTable("Individual");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Age)
                .HasMaxLength(500)
                .HasColumnName("age");
            entity.Property(e => e.AnimalId).HasColumnName("animal_id");
            entity.Property(e => e.BirthDate).HasColumnName("birth_date");
            entity.Property(e => e.Gender)
                .HasMaxLength(500)
                .HasColumnName("gender");
            entity.Property(e => e.Height)
                .HasMaxLength(500)
                .HasColumnName("height");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .HasColumnName("notes");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.Weight)
                .HasMaxLength(500)
                .HasColumnName("weight");

            entity.HasOne(d => d.Animal).WithMany(p => p.Individuals)
                .HasForeignKey(d => d.AnimalId)
                .HasConstraintName("FK__Individua__anima__1BC821DD");
        });

        modelBuilder.Entity<LeaderAssign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LeaderAs__3213E83FF7F43303");

            entity.ToTable("LeaderAssign");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.LeaderId).HasColumnName("leader_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.ToDate).HasColumnName("to_date");

            entity.HasOne(d => d.Leader).WithMany(p => p.LeaderAssigns)
                .HasForeignKey(d => d.LeaderId)
                .HasConstraintName("FK__LeaderAss__leade__1CBC4616");

            entity.HasOne(d => d.Team).WithMany(p => p.LeaderAssigns)
                .HasForeignKey(d => d.TeamId)
                .HasConstraintName("FK__LeaderAss__team___1DB06A4F");
        });

        modelBuilder.Entity<MealDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MealDay__3213E83F0F925043");

            entity.ToTable("MealDay");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalTypeId).HasColumnName("animal_type_id");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.PeriodOfTime)
                .HasMaxLength(500)
                .HasColumnName("period_of_time");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.TimeEndInDay).HasColumnName("time_end_in_day");
            entity.Property(e => e.TimeStartInDay).HasColumnName("time_start_in_day");
            entity.Property(e => e.TotalCalo).HasColumnName("total_calo");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");

            entity.HasOne(d => d.AnimalType).WithMany(p => p.MealDays)
                .HasForeignKey(d => d.AnimalTypeId)
                .HasConstraintName("FK__MealDay__animal___1EA48E88");
        });

        modelBuilder.Entity<MealFood>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MealFood__3213E83F60B7FF21");

            entity.ToTable("MealFood");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FoodId).HasColumnName("food_id");
            entity.Property(e => e.MealDayId).HasColumnName("meal_day_id");
            entity.Property(e => e.Quantitative).HasColumnName("quantitative");

            entity.HasOne(d => d.Food).WithMany(p => p.MealFoods)
                .HasForeignKey(d => d.FoodId)
                .HasConstraintName("FK__MealFood__food_i__1F98B2C1");

            entity.HasOne(d => d.MealDay).WithMany(p => p.MealFoods)
                .HasForeignKey(d => d.MealDayId)
                .HasConstraintName("FK__MealFood__meal_d__208CD6FA");
        });

        modelBuilder.Entity<MemberAssign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MemberAs__3213E83F1FFC65D7");

            entity.ToTable("MemberAssign");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.MemberId).HasColumnName("member_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.ToDate).HasColumnName("to_date");

            entity.HasOne(d => d.Member).WithMany(p => p.MemberAssigns)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK__MemberAss__membe__2180FB33");

            entity.HasOne(d => d.Team).WithMany(p => p.MemberAssigns)
                .HasForeignKey(d => d.TeamId)
                .HasConstraintName("FK__MemberAss__team___22751F6C");
        });

        modelBuilder.Entity<News>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__News__3213E83FD9CD1526");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Headline)
                .HasMaxLength(500)
                .HasColumnName("headline");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");

            entity.HasOne(d => d.Account).WithMany(p => p.News)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__News__account_id__236943A5");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__3213E83F069FA168");

            entity.ToTable("Notification");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Content)
                .HasMaxLength(500)
                .HasColumnName("content");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");

            entity.HasOne(d => d.Account).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Notificat__accou__245D67DE");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Report__3213E83F3798BEEC");

            entity.ToTable("Report");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Content)
                .HasMaxLength(500)
                .HasColumnName("content");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.ReceiverId).HasColumnName("receiver_id");
            entity.Property(e => e.SenderId).HasColumnName("sender_id");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .HasColumnName("title");

            entity.HasOne(d => d.Receiver).WithMany(p => p.ReportReceivers)
                .HasForeignKey(d => d.ReceiverId)
                .HasConstraintName("FK__Report__receiver__25518C17");

            entity.HasOne(d => d.Sender).WithMany(p => p.ReportSenders)
                .HasForeignKey(d => d.SenderId)
                .HasConstraintName("FK__Report__sender_i__2645B050");
        });

        modelBuilder.Entity<ReportAttachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ReportAt__3213E83FD24D36E0");

            entity.ToTable("ReportAttachment");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FileUrl).HasColumnName("file_url");
            entity.Property(e => e.ReportId).HasColumnName("report_id");

            entity.HasOne(d => d.Report).WithMany(p => p.ReportAttachments)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK__ReportAtt__repor__2739D489");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3213E83F4AABDE97");

            entity.ToTable("Role");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.MaxAbsencePerMonth).HasColumnName("max_absence_per_month");
            entity.Property(e => e.RoleName)
                .HasMaxLength(500)
                .HasColumnName("role_name");
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Schedule__3213E83F03AEE55E");

            entity.ToTable("Schedule");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .HasColumnName("note");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");

            entity.HasOne(d => d.Account).WithMany(p => p.Schedules)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Schedule__accoun__282DF8C2");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Task__3213E83F698DAC83");

            entity.ToTable("Task");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .HasColumnName("note");
            entity.Property(e => e.Priority)
                .HasMaxLength(500)
                .HasColumnName("priority");
            entity.Property(e => e.ScheduleId).HasColumnName("schedule_id");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.TaskName)
                .HasMaxLength(500)
                .HasColumnName("task_name");
            entity.Property(e => e.TaskTypeId).HasColumnName("task_type_id");
            entity.Property(e => e.TimeFinish).HasColumnName("time_finish");
            entity.Property(e => e.TimeStart).HasColumnName("time_start");
            entity.Property(e => e.TimeStartActual).HasColumnName("time_start_actual");
            entity.Property(e => e.UrlImage).HasColumnName("url_image");

            entity.HasOne(d => d.Schedule).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("FK__Task__schedule_i__29221CFB");

            entity.HasOne(d => d.TaskType).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.TaskTypeId)
                .HasConstraintName("FK__Task__task_type___2A164134");
        });

        modelBuilder.Entity<TaskEstimate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TaskEsti__3213E83FB611B7F4");

            entity.ToTable("TaskEstimate");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalTypeId).HasColumnName("animal_type_id");
            entity.Property(e => e.ImplementationProcess)
                .HasMaxLength(500)
                .HasColumnName("implementation_process");
            entity.Property(e => e.TaskTypeId).HasColumnName("task_type_id");
            entity.Property(e => e.TimeEstimate)
                .HasMaxLength(500)
                .HasColumnName("time_estimate");

            entity.HasOne(d => d.AnimalType).WithMany(p => p.TaskEstimates)
                .HasForeignKey(d => d.AnimalTypeId)
                .HasConstraintName("FK__TaskEstim__anima__2B0A656D");

            entity.HasOne(d => d.TaskType).WithMany(p => p.TaskEstimates)
                .HasForeignKey(d => d.TaskTypeId)
                .HasConstraintName("FK__TaskEstim__task___2BFE89A6");
        });

        modelBuilder.Entity<TaskHealth>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TaskHeal__3213E83F08E69656");

            entity.ToTable("TaskHealth");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalAssignId).HasColumnName("animal_assign_id");
            entity.Property(e => e.AnimalCondition)
                .HasMaxLength(500)
                .HasColumnName("animal_condition");
            entity.Property(e => e.DetailInformation)
                .HasMaxLength(500)
                .HasColumnName("detail_information");
            entity.Property(e => e.SeverityLevel)
                .HasMaxLength(500)
                .HasColumnName("severity_level");

            entity.HasOne(d => d.AnimalAssign).WithMany(p => p.TaskHealths)
                .HasForeignKey(d => d.AnimalAssignId)
                .HasConstraintName("FK__TaskHealt__anima__2CF2ADDF");
        });

        modelBuilder.Entity<TaskMeal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TaskMeal__3213E83FCEC63857");

            entity.ToTable("TaskMeal");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalAssignId).HasColumnName("animal_assign_id");
            entity.Property(e => e.MealDayId).HasColumnName("meal_day_id");
            entity.Property(e => e.Percent).HasColumnName("percent");

            entity.HasOne(d => d.AnimalAssign).WithMany(p => p.TaskMeals)
                .HasForeignKey(d => d.AnimalAssignId)
                .HasConstraintName("FK__TaskMeal__animal__2DE6D218");

            entity.HasOne(d => d.MealDay).WithMany(p => p.TaskMeals)
                .HasForeignKey(d => d.MealDayId)
                .HasConstraintName("FK__TaskMeal__meal_d__2EDAF651");
        });

        modelBuilder.Entity<TaskType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TaskType__3213E83F903DD7B8");

            entity.ToTable("TaskType");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Team__3213E83F0917A7AD");

            entity.ToTable("Team");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CurrentQuantity).HasColumnName("current_quantity");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.MaxQuantity).HasColumnName("max_quantity");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
            entity.Property(e => e.ZooAreaId).HasColumnName("zoo_area_id");

            entity.HasOne(d => d.ZooArea).WithMany(p => p.Teams)
                .HasForeignKey(d => d.ZooAreaId)
                .HasConstraintName("FK__Team__zoo_area_i__2FCF1A8A");
        });

        modelBuilder.Entity<UrlProcess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UrlProce__3213E83F285D6127");

            entity.ToTable("UrlProcess");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CleaningProcessId).HasColumnName("cleaning_process_id");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .HasColumnName("url");

            entity.HasOne(d => d.CleaningProcess).WithMany(p => p.UrlProcesses)
                .HasForeignKey(d => d.CleaningProcessId)
                .HasConstraintName("FK__UrlProces__clean__30C33EC3");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__User__3213E83FA9ED166B");

            entity.ToTable("User");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Address)
                .HasMaxLength(500)
                .HasColumnName("address");
            entity.Property(e => e.AvartarUrl)
                .HasMaxLength(500)
                .HasColumnName("avartar_url");
            entity.Property(e => e.Experience)
                .HasMaxLength(20)
                .HasColumnName("experience");
            entity.Property(e => e.FullName)
                .HasMaxLength(500)
                .HasColumnName("full_name");
            entity.Property(e => e.Gender)
                .HasMaxLength(20)
                .HasColumnName("gender");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .HasColumnName("phoneNumber");

            entity.HasOne(d => d.Account).WithMany(p => p.Users)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__User__account_id__31B762FC");
        });

        modelBuilder.Entity<ZooArea>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ZooArea__3213E83F0D09A5B8");

            entity.ToTable("ZooArea");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AnimalOrder)
                .HasMaxLength(500)
                .HasColumnName("animal_order");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .HasColumnName("location");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("updated_date");
            entity.Property(e => e.UrlImage).HasColumnName("url_image");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}